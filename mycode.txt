from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import time

# Step 1: Select "ÈÄêÊó•ÁõØÂ∏Ç" (Mark-to-Market)
select_element = Select(driver.find_element(By.NAME, "byType"))
select_element.select_by_value("date")  # or .select_by_index(0)

# Step 2: Click the submit button (Êèê‰∫§)
submit_button = driver.find_element(By.CSS_SELECTOR, "input.button[value='Êèê‰∫§']")
submit_button.click()

# Step 3: Wait for the "‰∏ãËΩΩ" (Download) link and click it
wait = WebDriverWait(driver, 10)
download_link = wait.until(EC.element_to_be_clickable((By.ID, "myDownload")))
download_link.click()
print("‚úÖ Download clicked.")

# Step 4: Wait a moment for download to start
time.sleep(2)  # Adjust if needed

# Step 5: Click the logout button ("ÈÄÄÂá∫Á≥ªÁªü")
logout_button = driver.find_element(By.CSS_SELECTOR, "input.button[name='logout']")
logout_button.click()
print("üëã Logged out successfully.")
----------------------------------
import base64
#from selenium import webdriver
#from selenium.webdriver.common.by import By
#from selenium.webdriver.chrome.service import Service
import time
from playwright.sync_api import sync_playwright
import os

USER_ID = ''
PASSWORD = ''

DOWNLOAD_DIR = os.path.abspath("downloads")
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

with sync_playwright() as p:
    browser = p.chromium.launch(headless=False)  # Use headless=True for fully headless
    context = browser.new_context(accept_downloads=True)
    page = context.new_page()

    # Open the CFMMC login page
    page.goto("https://investorservice.cfmmc.com/")

    # Wait for CAPTCHA to load
    page.wait_for_selector("#imgVeriCode")

    # Save CAPTCHA image locally
    page.screenshot(path="login_page.png")
    captcha_element = page.locator("#imgVeriCode")
    captcha_element.screenshot(path="captcha.png")

    print("CAPTCHA image saved as 'captcha.png'. Please open and read it.")
    vericode = input("Enter CAPTCHA code: ")

    # Fill the login form
    page.fill('input[name="userID"]', USER_ID)
    page.fill('input[name="password"]', PASSWORD)
    page.fill('input[name="vericode"]', vericode)

    # Submit the form
    page.click('input[type="submit"]')
    page.wait_for_load_state("networkidle")

    # Wait for either success or error
    try:
        page.wait_for_selector(".error-msg", timeout=5000)
        error = page.locator(".error-msg").inner_text()
        print("Login failed:", error)
    except:
        print("Login likely successful. Saving post-login page...")
        page.screenshot(path="after_login.png")
        with open("after_login.html", "w", encoding="utf-8") as f:
            f.write(page.content())
    page.select_option('select[name="byType"]', value='date')
    page.click('input[type="submit"].button')
    page.wait_for_selector('a#myDownload')
    with page.expect_download() as download_info:
        page.click('a#myDownload')
    download = download_info.value

    # Save the downloaded Excel file
    download_path = os.path.join(DOWNLOAD_DIR, download.suggested_filename)
    download.save_as(download_path)

    print(f"‚úÖ File downloaded: {download_path}")
    page.wait_for_selector('input[name="logout"][value="ÈÄÄÂá∫Á≥ªÁªü"]')
    page.click('input[name="logout"][value="ÈÄÄÂá∫Á≥ªÁªü"]')
    print("‚úÖ Logged out successfully.")
    time.sleep(5)
    context.close()

    browser.close()

